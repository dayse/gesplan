/* Generated By:JavaCC: Do not edit this line. XfuzzyConfigTokenManager.java */
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//   PARSER DE LA CONFIGURACION DE LAS DISTINTAS HERRAMIENTAS	//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package xfuzzy;
import xfuzzy.lang.*;
import xfuzzy.xfplot.*;
import xfuzzy.xfsim.*;
import xfuzzy.xfdm.*;
import xfuzzy.xfsl.*;
import java.io.*;
import java.util.Vector;

/** Token Manager. */
public class XfuzzyConfigTokenManager implements XfuzzyConfigConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8L) != 0L)
            return 0;
         if ((active0 & 0x7ffffffc0L) != 0L)
         {
            jjmatchedKind = 38;
            return 36;
         }
         return -1;
      case 1:
         if ((active0 & 0x7ffffffc0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 36;
         }
         return -1;
      case 2:
         if ((active0 & 0x7ffffffc0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
            return 36;
         }
         return -1;
      case 3:
         if ((active0 & 0x7ffffffc0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
            return 36;
         }
         return -1;
      case 4:
         if ((active0 & 0x7ffffffc0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
            return 36;
         }
         return -1;
      case 5:
         if ((active0 & 0x7ffffffc0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
            return 36;
         }
         return -1;
      case 6:
         if ((active0 & 0x7ffffffc0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
            return 36;
         }
         return -1;
      case 7:
         if ((active0 & 0x100L) != 0L)
            return 36;
         if ((active0 & 0x7fffffec0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
            return 36;
         }
         return -1;
      case 8:
         if ((active0 & 0x200080L) != 0L)
            return 36;
         if ((active0 & 0x7ffdffe40L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 8;
            return 36;
         }
         return -1;
      case 9:
         if ((active0 & 0x140480000L) != 0L)
            return 36;
         if ((active0 & 0x6bf97fe40L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 38;
               jjmatchedPos = 9;
            }
            return 36;
         }
         return -1;
      case 10:
         if ((active0 & 0x4bf82f440L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 10;
            return 36;
         }
         if ((active0 & 0x240150a00L) != 0L)
            return 36;
         return -1;
      case 11:
         if ((active0 & 0x41f80f440L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 11;
            return 36;
         }
         if ((active0 & 0xa0020000L) != 0L)
            return 36;
         return -1;
      case 12:
         if ((active0 & 0x41d80f400L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 12;
            return 36;
         }
         if ((active0 & 0x2000040L) != 0L)
            return 36;
         return -1;
      case 13:
         if ((active0 & 0x1400f000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 13;
            return 36;
         }
         if ((active0 & 0x409800400L) != 0L)
            return 36;
         return -1;
      case 14:
         if ((active0 & 0x1400f000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 14;
            return 36;
         }
         return -1;
      case 15:
         if ((active0 & 0x400f000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 15;
            return 36;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 36;
         return -1;
      case 16:
         if ((active0 & 0x4007000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 16;
            return 36;
         }
         if ((active0 & 0x8000L) != 0L)
            return 36;
         return -1;
      case 17:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 17;
            return 36;
         }
         if ((active0 & 0x4003000L) != 0L)
            return 36;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 32:
         return jjStopAtPos(0, 1);
      case 35:
         return jjStopAtPos(0, 4);
      case 38:
         return jjStopAtPos(0, 47);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 46);
      case 44:
         return jjStopAtPos(0, 48);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 60:
         return jjStopAtPos(0, 49);
      case 62:
         return jjStopAtPos(0, 50);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x7ffffffc0L);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x7ffffffc0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x7e0000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1f800000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x7fffc0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x7c0000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1f83ffc0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x7e0000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x7e003ffc0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x7c0000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1f800000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x7c0000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000400L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x19000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000a00L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x20006000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1f8000c0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x1f800000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400300400L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x140018000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4100L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x440800L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x3040L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000200L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x10040L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 103:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 36);
         return jjMoveStringLiteralDfa8_0(active0, 0x401800400L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x440000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x144000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x208024080L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0xa0000a00L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0xa060000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 103:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80840L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x410401400L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x80002200L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x1800000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 7, 36);
         return jjMoveStringLiteralDfa9_0(active0, 0x220004000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x140000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1800000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x220000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x12010000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x40040L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8800L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x404003400L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 36);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 36);
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000200L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 16, 36);
         break;
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000440L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 33, 36);
         break;
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 11, 36);
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x10002000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x9800000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x20004000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 30, 36);
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 9, 36);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 18, 36);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 36);
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 17, 36);
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x1800000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 29, 36);
         return jjMoveStringLiteralDfa12_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 31, 36);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000400L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      case 51:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0xc002000L);
      case 103:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(12, 6, 36);
         break;
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000400L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 25, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(13, 23, 36);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(13, 24, 36);
         break;
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x4001000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
      case 109:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(13, 10, 36);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(13, 34, 36);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 27, 36);
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x6000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x4001000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(15, 28, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x4003000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(16, 15, 36);
         return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000L);
      case 118:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(17, 26, 36);
         break;
      case 103:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(17, 13, 36);
         break;
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(17, 12, 36);
         return jjMoveStringLiteralDfa18_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(18, 14, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 36;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0xac004cb7ffffdbffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(20, 21);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  else if (curChar == 34)
                     jjCheckNAdd(11);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(26);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 42)
                     jjCheckNAddStates(4, 6);
                  break;
               case 3:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 2);
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 2);
                  break;
               case 5:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if ((0x2400L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 8:
                  if (curChar == 10 && kind > 35)
                     kind = 35;
                  break;
               case 9:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 34 && kind > 39)
                     kind = 39;
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if ((0xac004cb7ffffdbffL & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 19:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(20, 15);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 46)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(23, 15);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(0, 3);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(7, 8);
                  break;
               case 31:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(9, 11);
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(26);
                  }
                  break;
               case 1:
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
               case 4:
                  jjCheckNAddTwoStates(4, 2);
                  break;
               case 11:
                  jjAddStates(12, 13);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 18:
                  if ((0xf800000178000001L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(9, 11);
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if (curChar == 89 && kind > 40)
                     kind = 40;
                  break;
               case 33:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(4, 2);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(12, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 36 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 2:
                  if (curChar == 10 && kind > 37)
                     kind = 37;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 36)
                     kind = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   20, 21, 22, 15, 2, 3, 5, 30, 31, 26, 27, 28, 11, 12, 16, 17, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, 
"\170\146\163\154\137\164\162\141\151\156\151\156\147", "\170\146\163\154\137\164\145\163\164", "\170\146\163\154\137\154\157\147", 
"\170\146\163\154\137\157\165\164\160\165\164", "\170\146\163\154\137\141\154\147\157\162\151\164\150\155", 
"\170\146\163\154\137\157\160\164\151\157\156", "\170\146\163\154\137\145\162\162\157\162\146\165\156\143\164\151\157\156", 
"\170\146\163\154\137\160\162\145\160\162\157\143\145\163\163\151\156\147", 
"\170\146\163\154\137\160\157\163\164\160\162\157\143\145\163\163\151\156\147", "\170\146\163\154\137\145\156\144\143\157\156\144\151\164\151\157\156", 
"\170\146\163\154\137\145\156\141\142\154\145", "\170\146\163\154\137\144\151\163\141\142\154\145", 
"\170\146\163\151\155\137\160\154\141\156\164", "\170\146\163\151\155\137\151\156\151\164", 
"\170\146\163\151\155\137\154\151\155\151\164", "\170\146\163\151\155\137\154\157\147", 
"\170\146\163\151\155\137\160\154\157\164", "\170\146\160\154\157\164\137\147\162\141\160\150\63\104", 
"\170\146\160\154\157\164\137\147\162\141\160\150\62\104", "\170\146\160\154\157\164\137\166\141\154\165\145\163", 
"\170\146\160\154\157\164\137\160\145\162\163\160\145\143\164\151\166\145", "\170\146\160\154\157\164\137\163\141\155\160\154\145\163", 
"\170\146\160\154\157\164\137\143\157\154\157\162\155\157\144\145", "\170\146\144\155\137\160\141\164\164\145\162\156", 
"\170\146\144\155\137\151\156\160\165\164\163", "\170\146\144\155\137\157\165\164\160\165\164\163", 
"\170\146\144\155\137\151\156\160\165\164", "\170\146\144\155\137\163\171\163\164\145\155", 
"\170\146\144\155\137\141\154\147\157\162\151\164\150\155", null, null, null, null, null, null, null, null, null, null, "\50", "\51", 
"\46", "\54", "\74", "\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0x7f3efffffffc1L, 
};
static final long[] jjtoSkip = {
   0x100000003eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[36];
private final int[] jjstateSet = new int[72];
protected char curChar;
/** Constructor. */
public XfuzzyConfigTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public XfuzzyConfigTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 36; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
