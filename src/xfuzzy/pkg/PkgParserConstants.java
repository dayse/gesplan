/* Generated By:JavaCC: Do not edit this line. PkgParserConstants.java */
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//		PARSER DE LOS PAQUETES DE FUNCIONES		//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

package xfuzzy.pkg;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PkgParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int BINARY = 8;
  /** RegularExpression Id. */
  int UNARY = 9;
  /** RegularExpression Id. */
  int MF = 10;
  /** RegularExpression Id. */
  int DEFUZ = 11;
  /** RegularExpression Id. */
  int FAMILY = 12;
  /** RegularExpression Id. */
  int CRISP = 13;
  /** RegularExpression Id. */
  int ALIAS = 14;
  /** RegularExpression Id. */
  int PARAM = 15;
  /** RegularExpression Id. */
  int DEFINED = 16;
  /** RegularExpression Id. */
  int EQUAL = 17;
  /** RegularExpression Id. */
  int GREATER = 18;
  /** RegularExpression Id. */
  int SMALLER = 19;
  /** RegularExpression Id. */
  int CENTER = 20;
  /** RegularExpression Id. */
  int BASIS = 21;
  /** RegularExpression Id. */
  int JAVA = 22;
  /** RegularExpression Id. */
  int ANSI_C = 23;
  /** RegularExpression Id. */
  int CPLUSPLUS = 24;
  /** RegularExpression Id. */
  int DERIVATIVE = 25;
  /** RegularExpression Id. */
  int REQUIRES = 26;
  /** RegularExpression Id. */
  int SOURCE = 27;
  /** RegularExpression Id. */
  int MEMBERS = 28;
  /** RegularExpression Id. */
  int INPUTS = 29;
  /** RegularExpression Id. */
  int UPDATE = 30;
  /** RegularExpression Id. */
  int ID = 31;
  /** RegularExpression Id. */
  int OPERATOR = 32;
  /** RegularExpression Id. */
  int LBRACE = 33;
  /** RegularExpression Id. */
  int RBRACE = 34;
  /** RegularExpression Id. */
  int OTHER = 35;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int CODEBLOCK = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\t\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"binary\"",
    "\"unary\"",
    "\"mf\"",
    "\"defuz\"",
    "\"family\"",
    "\"crisp\"",
    "\"alias\"",
    "\"parameter\"",
    "\"definedfor\"",
    "\"equal\"",
    "\"greatereq\"",
    "\"smallereq\"",
    "\"center\"",
    "\"basis\"",
    "\"java\"",
    "\"ansi_c\"",
    "\"cplusplus\"",
    "\"derivative\"",
    "\"requires\"",
    "\"source\"",
    "\"members\"",
    "\"inputs\"",
    "\"update\"",
    "<ID>",
    "<OPERATOR>",
    "\"{\"",
    "\"}\"",
    "<OTHER>",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
  };

}
