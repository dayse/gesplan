//+++++++++++++++++++++++++++++++++++++++++++++++++++++
// File automatically generated by Xfuzzy - DO NOT EDIT
//+++++++++++++++++++++++++++++++++++++++++++++++++++++

package pkg.xfsg.mfunc;

import xfuzzy.lang.*;

public class triangle extends ParamMemFunc {
 public triangle() {
   super("xfsg","triangle");
   Parameter single[] = new Parameter[3];
   single[0] = new Parameter("a");
   single[1] = new Parameter("b");
   single[2] = new Parameter("c");
   setSingleParameters(single);
  }

 public double compute(double x) {
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
 return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0)); 
  }

 public double greatereq(double x) {
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
 return (x<a? 0 : (x>b? 1 : (x-a)/(b-a) )); 
  }

 public double smallereq(double x) {
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
 return (x<b? 1 : (x>c? 0 : (c-x)/(c-b) )); 
  }

 public double center() {
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
 return b; 
  }

 public double basis() {
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
 return (c-a); 
  }

 public double[] deriv_eq(double x) {
   double[] deriv = new double[getNumberOfParameters()];
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
   deriv[0] = (a<x && x<b ? (x-b)/((b-a)*(b-a)) : (x==a? 0.5/(a-b) : 0));
   deriv[1] = (a<x && x<b ? (a-x)/((b-a)*(b-a)) :
              (b<x && x<c ? (c-x)/((c-b)*(c-b)) :
              (x==b? 0.5/(a-b) + 0.5/(c-b) : 0)));
   deriv[2] = (b<x && x<c ? (x-b)/((c-b)*(c-b)) : (x==c? 0.5/(c-b) : 0));
   return deriv;
  }

 public double[] deriv_greq(double x) {
   double[] deriv = new double[getNumberOfParameters()];
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
   deriv[0] = (a<x && x<b ? (x-b)/((b-a)*(b-a)) : (x==a? 0.5/(a-b) : 0));
   deriv[1] = (a<x && x<b ? (a-x)/((b-a)*(b-a)) : (x==b? 0.5/(a-b) : 0));
   deriv[2] = 0;
   return deriv;
  }

 public double[] deriv_smeq(double x) {
   double[] deriv = new double[getNumberOfParameters()];
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
   deriv[0] = 0;
   deriv[1] = (b<x && x<c ? (c-x)/((c-b)*(c-b)) : (x==b? 0.5/(c-b) : 0));
   deriv[2] = (b<x && x<c ? (x-b)/((c-b)*(c-b)) : (x==c? 0.5/(c-b) : 0));
   return deriv;
  }

 public double[] deriv_center() {
   double[] deriv = new double[getNumberOfParameters()];
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
   deriv[0] = 1;
   deriv[1] = 1;
   deriv[2] = 1;
   return deriv;
  }

 public double[] deriv_basis() {
   double[] deriv = new double[getNumberOfParameters()];
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
   deriv[0] = -1;
   deriv[1] = 0;
   deriv[2] = 1;
   return deriv;
  }

 public boolean test () {
   double min = this.u.min();
   double max = this.u.max();
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
   return ( a<b && b<c && b>=min && b<=max );
  }

 public void update() {
   if(!isAdjustable()) return;
   double[] pos = get();
   double[] desp = getDesp();
   boolean[] adj = getAdjustable();
   double min = this.u.min();
   double max = this.u.max();
   double step = this.u.step();
   double a = singleparam[0].value;
   double b = singleparam[1].value;
   double c = singleparam[2].value;
  pos = sortedUpdate(pos,desp,adj);
  if(pos[1]<min) {
   pos[1]=min;
   if(pos[2]<=pos[1]) pos[2] = pos[1]+step;
  }
  if(pos[1]>max) {
   pos[1]=max;
   if(pos[0]>=pos[1]) pos[0] = pos[1]-step;
  }
   updateValues(pos);
  }

 public String getEqualJavaCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0)); "+eol;
   return code;
  }

 public String getGreqJavaCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (x<a? 0 : (x>b? 1 : (x-a)/(b-a) )); "+eol;
   return code;
  }

 public String getSmeqJavaCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (x<b? 1 : (x>c? 0 : (c-x)/(c-b) )); "+eol;
   return code;
  }

 public String getCenterJavaCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return b; "+eol;
   return code;
  }

 public String getBasisJavaCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (c-a); "+eol;
   return code;
  }


 public String getEqualCCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0)); "+eol;
   return code;
  }

 public String getGreqCCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (x<a? 0 : (x>b? 1 : (x-a)/(b-a) )); "+eol;
   return code;
  }

 public String getSmeqCCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (x<b? 1 : (x>c? 0 : (c-x)/(c-b) )); "+eol;
   return code;
  }

 public String getCenterCCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return b; "+eol;
   return code;
  }

 public String getBasisCCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (c-a); "+eol;
   return code;
  }


 public String getEqualCppCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (a<x && x<=b? (x-a)/(b-a) : (b<x && x<c? (c-x)/(c-b) : 0)); "+eol;
   return code;
  }

 public String getGreqCppCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (x<a? 0 : (x>b? 1 : (x-a)/(b-a) )); "+eol;
   return code;
  }

 public String getSmeqCppCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (x<b? 1 : (x>c? 0 : (c-x)/(c-b) )); "+eol;
   return code;
  }

 public String getCenterCppCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return b; "+eol;
   return code;
  }

 public String getBasisCppCode() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "    return (c-a); "+eol;
   return code;
  }

}
